# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Download Auto Py to Exe
      run: |
        git clone https://github.com/brentvollebregt/auto-py-to-exe.git
        cd auto-py-to-exe
        python -m pip install -r requirements.txt
    - name: Build exe for distribution
      run: |
        pyinstaller --noconfirm --onedir --windowed --icon "./_internal/favicon.ico" --name "dynu_updater" --clean --add-data "./dynu_updater/__init__.py;." --add-data "./dynu_updater/autoupdateipthread.py;." --add-data "./dynu_updater/countdownthread.py;." --add-data "./dynu_updater/gui.py;." --add-data "./_internal/favicon.ico;."  "./main.py"
    - name: Zip Folder
      run: |
        cd ./dist/dynu_updater
        rm -rf dynu_updater.zip
        zip -r dynu_updater.zip ./_internal dynu_updater.exe -x ".git/*" ".github/*"
    # - name: Create release
    #   id: create_release
    #   uses: actions/create-release@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
    #   with:
    #     tag_name: ${{ github.ref }}
    #     release_name: Release ${{ github.ref }}
    #     body: "Auto generated release."
    #     draft: true
    #     prerelease: false
    # - name: Upload Release Asset
    #   id: upload-release-asset 
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #     asset_path: NameOfYourArtifact.exe
    #     asset_name: NameOfYourArtifact.exe
    #     asset_content_type: application/octet-stream
        
